// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fayipon/gg-pr-plusins/plusins_business/internal/ent/merchant"
)

// MerchantCreate is the builder for creating a Merchant entity.
type MerchantCreate struct {
	config
	mutation *MerchantMutation
	hooks    []Hook
}

// SetMerchantCode sets the "merchant_code" field.
func (_c *MerchantCreate) SetMerchantCode(v string) *MerchantCreate {
	_c.mutation.SetMerchantCode(v)
	return _c
}

// SetName sets the "name" field.
func (_c *MerchantCreate) SetName(v string) *MerchantCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetContactEmail sets the "contact_email" field.
func (_c *MerchantCreate) SetContactEmail(v string) *MerchantCreate {
	_c.mutation.SetContactEmail(v)
	return _c
}

// SetContactPhone sets the "contact_phone" field.
func (_c *MerchantCreate) SetContactPhone(v string) *MerchantCreate {
	_c.mutation.SetContactPhone(v)
	return _c
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (_c *MerchantCreate) SetNillableContactPhone(v *string) *MerchantCreate {
	if v != nil {
		_c.SetContactPhone(*v)
	}
	return _c
}

// SetDomain sets the "domain" field.
func (_c *MerchantCreate) SetDomain(v string) *MerchantCreate {
	_c.mutation.SetDomain(v)
	return _c
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_c *MerchantCreate) SetNillableDomain(v *string) *MerchantCreate {
	if v != nil {
		_c.SetDomain(*v)
	}
	return _c
}

// SetPlanID sets the "plan_id" field.
func (_c *MerchantCreate) SetPlanID(v int64) *MerchantCreate {
	_c.mutation.SetPlanID(v)
	return _c
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (_c *MerchantCreate) SetNillablePlanID(v *int64) *MerchantCreate {
	if v != nil {
		_c.SetPlanID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *MerchantCreate) SetStatus(v string) *MerchantCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *MerchantCreate) SetNillableStatus(v *string) *MerchantCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// Mutation returns the MerchantMutation object of the builder.
func (_c *MerchantCreate) Mutation() *MerchantMutation {
	return _c.mutation
}

// Save creates the Merchant in the database.
func (_c *MerchantCreate) Save(ctx context.Context) (*Merchant, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MerchantCreate) SaveX(ctx context.Context) *Merchant {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MerchantCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MerchantCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MerchantCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := merchant.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MerchantCreate) check() error {
	if _, ok := _c.mutation.MerchantCode(); !ok {
		return &ValidationError{Name: "merchant_code", err: errors.New(`ent: missing required field "Merchant.merchant_code"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Merchant.name"`)}
	}
	if _, ok := _c.mutation.ContactEmail(); !ok {
		return &ValidationError{Name: "contact_email", err: errors.New(`ent: missing required field "Merchant.contact_email"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Merchant.status"`)}
	}
	return nil
}

func (_c *MerchantCreate) sqlSave(ctx context.Context) (*Merchant, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MerchantCreate) createSpec() (*Merchant, *sqlgraph.CreateSpec) {
	var (
		_node = &Merchant{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(merchant.Table, sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.MerchantCode(); ok {
		_spec.SetField(merchant.FieldMerchantCode, field.TypeString, value)
		_node.MerchantCode = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(merchant.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.ContactEmail(); ok {
		_spec.SetField(merchant.FieldContactEmail, field.TypeString, value)
		_node.ContactEmail = value
	}
	if value, ok := _c.mutation.ContactPhone(); ok {
		_spec.SetField(merchant.FieldContactPhone, field.TypeString, value)
		_node.ContactPhone = value
	}
	if value, ok := _c.mutation.Domain(); ok {
		_spec.SetField(merchant.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := _c.mutation.PlanID(); ok {
		_spec.SetField(merchant.FieldPlanID, field.TypeInt64, value)
		_node.PlanID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(merchant.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	return _node, _spec
}

// MerchantCreateBulk is the builder for creating many Merchant entities in bulk.
type MerchantCreateBulk struct {
	config
	err      error
	builders []*MerchantCreate
}

// Save creates the Merchant entities in the database.
func (_c *MerchantCreateBulk) Save(ctx context.Context) ([]*Merchant, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Merchant, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MerchantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MerchantCreateBulk) SaveX(ctx context.Context) []*Merchant {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MerchantCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MerchantCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
