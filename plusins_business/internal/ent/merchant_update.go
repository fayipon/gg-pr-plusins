// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fayipon/gg-pr-plusins/plusins_business/internal/ent/merchant"
	"github.com/fayipon/gg-pr-plusins/plusins_business/internal/ent/predicate"
)

// MerchantUpdate is the builder for updating Merchant entities.
type MerchantUpdate struct {
	config
	hooks    []Hook
	mutation *MerchantMutation
}

// Where appends a list predicates to the MerchantUpdate builder.
func (_u *MerchantUpdate) Where(ps ...predicate.Merchant) *MerchantUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMerchantCode sets the "merchant_code" field.
func (_u *MerchantUpdate) SetMerchantCode(v string) *MerchantUpdate {
	_u.mutation.SetMerchantCode(v)
	return _u
}

// SetNillableMerchantCode sets the "merchant_code" field if the given value is not nil.
func (_u *MerchantUpdate) SetNillableMerchantCode(v *string) *MerchantUpdate {
	if v != nil {
		_u.SetMerchantCode(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *MerchantUpdate) SetName(v string) *MerchantUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MerchantUpdate) SetNillableName(v *string) *MerchantUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetContactEmail sets the "contact_email" field.
func (_u *MerchantUpdate) SetContactEmail(v string) *MerchantUpdate {
	_u.mutation.SetContactEmail(v)
	return _u
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (_u *MerchantUpdate) SetNillableContactEmail(v *string) *MerchantUpdate {
	if v != nil {
		_u.SetContactEmail(*v)
	}
	return _u
}

// SetContactPhone sets the "contact_phone" field.
func (_u *MerchantUpdate) SetContactPhone(v string) *MerchantUpdate {
	_u.mutation.SetContactPhone(v)
	return _u
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (_u *MerchantUpdate) SetNillableContactPhone(v *string) *MerchantUpdate {
	if v != nil {
		_u.SetContactPhone(*v)
	}
	return _u
}

// ClearContactPhone clears the value of the "contact_phone" field.
func (_u *MerchantUpdate) ClearContactPhone() *MerchantUpdate {
	_u.mutation.ClearContactPhone()
	return _u
}

// SetDomain sets the "domain" field.
func (_u *MerchantUpdate) SetDomain(v string) *MerchantUpdate {
	_u.mutation.SetDomain(v)
	return _u
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_u *MerchantUpdate) SetNillableDomain(v *string) *MerchantUpdate {
	if v != nil {
		_u.SetDomain(*v)
	}
	return _u
}

// ClearDomain clears the value of the "domain" field.
func (_u *MerchantUpdate) ClearDomain() *MerchantUpdate {
	_u.mutation.ClearDomain()
	return _u
}

// SetPlanID sets the "plan_id" field.
func (_u *MerchantUpdate) SetPlanID(v int64) *MerchantUpdate {
	_u.mutation.ResetPlanID()
	_u.mutation.SetPlanID(v)
	return _u
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (_u *MerchantUpdate) SetNillablePlanID(v *int64) *MerchantUpdate {
	if v != nil {
		_u.SetPlanID(*v)
	}
	return _u
}

// AddPlanID adds value to the "plan_id" field.
func (_u *MerchantUpdate) AddPlanID(v int64) *MerchantUpdate {
	_u.mutation.AddPlanID(v)
	return _u
}

// ClearPlanID clears the value of the "plan_id" field.
func (_u *MerchantUpdate) ClearPlanID() *MerchantUpdate {
	_u.mutation.ClearPlanID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MerchantUpdate) SetStatus(v string) *MerchantUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MerchantUpdate) SetNillableStatus(v *string) *MerchantUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// Mutation returns the MerchantMutation object of the builder.
func (_u *MerchantUpdate) Mutation() *MerchantMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MerchantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MerchantUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MerchantUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MerchantUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *MerchantUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(merchant.Table, merchant.Columns, sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MerchantCode(); ok {
		_spec.SetField(merchant.FieldMerchantCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(merchant.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ContactEmail(); ok {
		_spec.SetField(merchant.FieldContactEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.ContactPhone(); ok {
		_spec.SetField(merchant.FieldContactPhone, field.TypeString, value)
	}
	if _u.mutation.ContactPhoneCleared() {
		_spec.ClearField(merchant.FieldContactPhone, field.TypeString)
	}
	if value, ok := _u.mutation.Domain(); ok {
		_spec.SetField(merchant.FieldDomain, field.TypeString, value)
	}
	if _u.mutation.DomainCleared() {
		_spec.ClearField(merchant.FieldDomain, field.TypeString)
	}
	if value, ok := _u.mutation.PlanID(); ok {
		_spec.SetField(merchant.FieldPlanID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPlanID(); ok {
		_spec.AddField(merchant.FieldPlanID, field.TypeInt64, value)
	}
	if _u.mutation.PlanIDCleared() {
		_spec.ClearField(merchant.FieldPlanID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(merchant.FieldStatus, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MerchantUpdateOne is the builder for updating a single Merchant entity.
type MerchantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MerchantMutation
}

// SetMerchantCode sets the "merchant_code" field.
func (_u *MerchantUpdateOne) SetMerchantCode(v string) *MerchantUpdateOne {
	_u.mutation.SetMerchantCode(v)
	return _u
}

// SetNillableMerchantCode sets the "merchant_code" field if the given value is not nil.
func (_u *MerchantUpdateOne) SetNillableMerchantCode(v *string) *MerchantUpdateOne {
	if v != nil {
		_u.SetMerchantCode(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *MerchantUpdateOne) SetName(v string) *MerchantUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MerchantUpdateOne) SetNillableName(v *string) *MerchantUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetContactEmail sets the "contact_email" field.
func (_u *MerchantUpdateOne) SetContactEmail(v string) *MerchantUpdateOne {
	_u.mutation.SetContactEmail(v)
	return _u
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (_u *MerchantUpdateOne) SetNillableContactEmail(v *string) *MerchantUpdateOne {
	if v != nil {
		_u.SetContactEmail(*v)
	}
	return _u
}

// SetContactPhone sets the "contact_phone" field.
func (_u *MerchantUpdateOne) SetContactPhone(v string) *MerchantUpdateOne {
	_u.mutation.SetContactPhone(v)
	return _u
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (_u *MerchantUpdateOne) SetNillableContactPhone(v *string) *MerchantUpdateOne {
	if v != nil {
		_u.SetContactPhone(*v)
	}
	return _u
}

// ClearContactPhone clears the value of the "contact_phone" field.
func (_u *MerchantUpdateOne) ClearContactPhone() *MerchantUpdateOne {
	_u.mutation.ClearContactPhone()
	return _u
}

// SetDomain sets the "domain" field.
func (_u *MerchantUpdateOne) SetDomain(v string) *MerchantUpdateOne {
	_u.mutation.SetDomain(v)
	return _u
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (_u *MerchantUpdateOne) SetNillableDomain(v *string) *MerchantUpdateOne {
	if v != nil {
		_u.SetDomain(*v)
	}
	return _u
}

// ClearDomain clears the value of the "domain" field.
func (_u *MerchantUpdateOne) ClearDomain() *MerchantUpdateOne {
	_u.mutation.ClearDomain()
	return _u
}

// SetPlanID sets the "plan_id" field.
func (_u *MerchantUpdateOne) SetPlanID(v int64) *MerchantUpdateOne {
	_u.mutation.ResetPlanID()
	_u.mutation.SetPlanID(v)
	return _u
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (_u *MerchantUpdateOne) SetNillablePlanID(v *int64) *MerchantUpdateOne {
	if v != nil {
		_u.SetPlanID(*v)
	}
	return _u
}

// AddPlanID adds value to the "plan_id" field.
func (_u *MerchantUpdateOne) AddPlanID(v int64) *MerchantUpdateOne {
	_u.mutation.AddPlanID(v)
	return _u
}

// ClearPlanID clears the value of the "plan_id" field.
func (_u *MerchantUpdateOne) ClearPlanID() *MerchantUpdateOne {
	_u.mutation.ClearPlanID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MerchantUpdateOne) SetStatus(v string) *MerchantUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MerchantUpdateOne) SetNillableStatus(v *string) *MerchantUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// Mutation returns the MerchantMutation object of the builder.
func (_u *MerchantUpdateOne) Mutation() *MerchantMutation {
	return _u.mutation
}

// Where appends a list predicates to the MerchantUpdate builder.
func (_u *MerchantUpdateOne) Where(ps ...predicate.Merchant) *MerchantUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MerchantUpdateOne) Select(field string, fields ...string) *MerchantUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Merchant entity.
func (_u *MerchantUpdateOne) Save(ctx context.Context) (*Merchant, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MerchantUpdateOne) SaveX(ctx context.Context) *Merchant {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MerchantUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MerchantUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *MerchantUpdateOne) sqlSave(ctx context.Context) (_node *Merchant, err error) {
	_spec := sqlgraph.NewUpdateSpec(merchant.Table, merchant.Columns, sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Merchant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, merchant.FieldID)
		for _, f := range fields {
			if !merchant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != merchant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MerchantCode(); ok {
		_spec.SetField(merchant.FieldMerchantCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(merchant.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ContactEmail(); ok {
		_spec.SetField(merchant.FieldContactEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.ContactPhone(); ok {
		_spec.SetField(merchant.FieldContactPhone, field.TypeString, value)
	}
	if _u.mutation.ContactPhoneCleared() {
		_spec.ClearField(merchant.FieldContactPhone, field.TypeString)
	}
	if value, ok := _u.mutation.Domain(); ok {
		_spec.SetField(merchant.FieldDomain, field.TypeString, value)
	}
	if _u.mutation.DomainCleared() {
		_spec.ClearField(merchant.FieldDomain, field.TypeString)
	}
	if value, ok := _u.mutation.PlanID(); ok {
		_spec.SetField(merchant.FieldPlanID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPlanID(); ok {
		_spec.AddField(merchant.FieldPlanID, field.TypeInt64, value)
	}
	if _u.mutation.PlanIDCleared() {
		_spec.ClearField(merchant.FieldPlanID, field.TypeInt64)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(merchant.FieldStatus, field.TypeString, value)
	}
	_node = &Merchant{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
