// Code generated by ent, DO NOT EDIT.

package merchant

import (
	"entgo.io/ent/dialect/sql"
	"github.com/fayipon/gg-pr-plusins/plusins_business/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldID, id))
}

// MerchantCode applies equality check predicate on the "merchant_code" field. It's identical to MerchantCodeEQ.
func MerchantCode(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldMerchantCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldName, v))
}

// ContactEmail applies equality check predicate on the "contact_email" field. It's identical to ContactEmailEQ.
func ContactEmail(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldContactEmail, v))
}

// ContactPhone applies equality check predicate on the "contact_phone" field. It's identical to ContactPhoneEQ.
func ContactPhone(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldContactPhone, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldDomain, v))
}

// PlanID applies equality check predicate on the "plan_id" field. It's identical to PlanIDEQ.
func PlanID(v int64) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldPlanID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldStatus, v))
}

// MerchantCodeEQ applies the EQ predicate on the "merchant_code" field.
func MerchantCodeEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldMerchantCode, v))
}

// MerchantCodeNEQ applies the NEQ predicate on the "merchant_code" field.
func MerchantCodeNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldMerchantCode, v))
}

// MerchantCodeIn applies the In predicate on the "merchant_code" field.
func MerchantCodeIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldMerchantCode, vs...))
}

// MerchantCodeNotIn applies the NotIn predicate on the "merchant_code" field.
func MerchantCodeNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldMerchantCode, vs...))
}

// MerchantCodeGT applies the GT predicate on the "merchant_code" field.
func MerchantCodeGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldMerchantCode, v))
}

// MerchantCodeGTE applies the GTE predicate on the "merchant_code" field.
func MerchantCodeGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldMerchantCode, v))
}

// MerchantCodeLT applies the LT predicate on the "merchant_code" field.
func MerchantCodeLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldMerchantCode, v))
}

// MerchantCodeLTE applies the LTE predicate on the "merchant_code" field.
func MerchantCodeLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldMerchantCode, v))
}

// MerchantCodeContains applies the Contains predicate on the "merchant_code" field.
func MerchantCodeContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldMerchantCode, v))
}

// MerchantCodeHasPrefix applies the HasPrefix predicate on the "merchant_code" field.
func MerchantCodeHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldMerchantCode, v))
}

// MerchantCodeHasSuffix applies the HasSuffix predicate on the "merchant_code" field.
func MerchantCodeHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldMerchantCode, v))
}

// MerchantCodeEqualFold applies the EqualFold predicate on the "merchant_code" field.
func MerchantCodeEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldMerchantCode, v))
}

// MerchantCodeContainsFold applies the ContainsFold predicate on the "merchant_code" field.
func MerchantCodeContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldMerchantCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldName, v))
}

// ContactEmailEQ applies the EQ predicate on the "contact_email" field.
func ContactEmailEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldContactEmail, v))
}

// ContactEmailNEQ applies the NEQ predicate on the "contact_email" field.
func ContactEmailNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldContactEmail, v))
}

// ContactEmailIn applies the In predicate on the "contact_email" field.
func ContactEmailIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldContactEmail, vs...))
}

// ContactEmailNotIn applies the NotIn predicate on the "contact_email" field.
func ContactEmailNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldContactEmail, vs...))
}

// ContactEmailGT applies the GT predicate on the "contact_email" field.
func ContactEmailGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldContactEmail, v))
}

// ContactEmailGTE applies the GTE predicate on the "contact_email" field.
func ContactEmailGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldContactEmail, v))
}

// ContactEmailLT applies the LT predicate on the "contact_email" field.
func ContactEmailLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldContactEmail, v))
}

// ContactEmailLTE applies the LTE predicate on the "contact_email" field.
func ContactEmailLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldContactEmail, v))
}

// ContactEmailContains applies the Contains predicate on the "contact_email" field.
func ContactEmailContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldContactEmail, v))
}

// ContactEmailHasPrefix applies the HasPrefix predicate on the "contact_email" field.
func ContactEmailHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldContactEmail, v))
}

// ContactEmailHasSuffix applies the HasSuffix predicate on the "contact_email" field.
func ContactEmailHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldContactEmail, v))
}

// ContactEmailEqualFold applies the EqualFold predicate on the "contact_email" field.
func ContactEmailEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldContactEmail, v))
}

// ContactEmailContainsFold applies the ContainsFold predicate on the "contact_email" field.
func ContactEmailContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldContactEmail, v))
}

// ContactPhoneEQ applies the EQ predicate on the "contact_phone" field.
func ContactPhoneEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldContactPhone, v))
}

// ContactPhoneNEQ applies the NEQ predicate on the "contact_phone" field.
func ContactPhoneNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldContactPhone, v))
}

// ContactPhoneIn applies the In predicate on the "contact_phone" field.
func ContactPhoneIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldContactPhone, vs...))
}

// ContactPhoneNotIn applies the NotIn predicate on the "contact_phone" field.
func ContactPhoneNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldContactPhone, vs...))
}

// ContactPhoneGT applies the GT predicate on the "contact_phone" field.
func ContactPhoneGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldContactPhone, v))
}

// ContactPhoneGTE applies the GTE predicate on the "contact_phone" field.
func ContactPhoneGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldContactPhone, v))
}

// ContactPhoneLT applies the LT predicate on the "contact_phone" field.
func ContactPhoneLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldContactPhone, v))
}

// ContactPhoneLTE applies the LTE predicate on the "contact_phone" field.
func ContactPhoneLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldContactPhone, v))
}

// ContactPhoneContains applies the Contains predicate on the "contact_phone" field.
func ContactPhoneContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldContactPhone, v))
}

// ContactPhoneHasPrefix applies the HasPrefix predicate on the "contact_phone" field.
func ContactPhoneHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldContactPhone, v))
}

// ContactPhoneHasSuffix applies the HasSuffix predicate on the "contact_phone" field.
func ContactPhoneHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldContactPhone, v))
}

// ContactPhoneIsNil applies the IsNil predicate on the "contact_phone" field.
func ContactPhoneIsNil() predicate.Merchant {
	return predicate.Merchant(sql.FieldIsNull(FieldContactPhone))
}

// ContactPhoneNotNil applies the NotNil predicate on the "contact_phone" field.
func ContactPhoneNotNil() predicate.Merchant {
	return predicate.Merchant(sql.FieldNotNull(FieldContactPhone))
}

// ContactPhoneEqualFold applies the EqualFold predicate on the "contact_phone" field.
func ContactPhoneEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldContactPhone, v))
}

// ContactPhoneContainsFold applies the ContainsFold predicate on the "contact_phone" field.
func ContactPhoneContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldContactPhone, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainIsNil applies the IsNil predicate on the "domain" field.
func DomainIsNil() predicate.Merchant {
	return predicate.Merchant(sql.FieldIsNull(FieldDomain))
}

// DomainNotNil applies the NotNil predicate on the "domain" field.
func DomainNotNil() predicate.Merchant {
	return predicate.Merchant(sql.FieldNotNull(FieldDomain))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldDomain, v))
}

// PlanIDEQ applies the EQ predicate on the "plan_id" field.
func PlanIDEQ(v int64) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldPlanID, v))
}

// PlanIDNEQ applies the NEQ predicate on the "plan_id" field.
func PlanIDNEQ(v int64) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldPlanID, v))
}

// PlanIDIn applies the In predicate on the "plan_id" field.
func PlanIDIn(vs ...int64) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldPlanID, vs...))
}

// PlanIDNotIn applies the NotIn predicate on the "plan_id" field.
func PlanIDNotIn(vs ...int64) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldPlanID, vs...))
}

// PlanIDGT applies the GT predicate on the "plan_id" field.
func PlanIDGT(v int64) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldPlanID, v))
}

// PlanIDGTE applies the GTE predicate on the "plan_id" field.
func PlanIDGTE(v int64) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldPlanID, v))
}

// PlanIDLT applies the LT predicate on the "plan_id" field.
func PlanIDLT(v int64) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldPlanID, v))
}

// PlanIDLTE applies the LTE predicate on the "plan_id" field.
func PlanIDLTE(v int64) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldPlanID, v))
}

// PlanIDIsNil applies the IsNil predicate on the "plan_id" field.
func PlanIDIsNil() predicate.Merchant {
	return predicate.Merchant(sql.FieldIsNull(FieldPlanID))
}

// PlanIDNotNil applies the NotNil predicate on the "plan_id" field.
func PlanIDNotNil() predicate.Merchant {
	return predicate.Merchant(sql.FieldNotNull(FieldPlanID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Merchant {
	return predicate.Merchant(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(sql.FieldContainsFold(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(sql.NotPredicates(p))
}
