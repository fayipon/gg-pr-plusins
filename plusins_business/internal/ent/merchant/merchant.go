// Code generated by ent, DO NOT EDIT.

package merchant

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the merchant type in the database.
	Label = "merchant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMerchantCode holds the string denoting the merchant_code field in the database.
	FieldMerchantCode = "merchant_code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldContactEmail holds the string denoting the contact_email field in the database.
	FieldContactEmail = "contact_email"
	// FieldContactPhone holds the string denoting the contact_phone field in the database.
	FieldContactPhone = "contact_phone"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldPlanID holds the string denoting the plan_id field in the database.
	FieldPlanID = "plan_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the merchant in the database.
	Table = "merchants"
)

// Columns holds all SQL columns for merchant fields.
var Columns = []string{
	FieldID,
	FieldMerchantCode,
	FieldName,
	FieldContactEmail,
	FieldContactPhone,
	FieldDomain,
	FieldPlanID,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
)

// OrderOption defines the ordering options for the Merchant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMerchantCode orders the results by the merchant_code field.
func ByMerchantCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMerchantCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByContactEmail orders the results by the contact_email field.
func ByContactEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactEmail, opts...).ToFunc()
}

// ByContactPhone orders the results by the contact_phone field.
func ByContactPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPhone, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByPlanID orders the results by the plan_id field.
func ByPlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
